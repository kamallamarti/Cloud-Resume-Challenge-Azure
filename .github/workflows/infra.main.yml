name: Production Infra and Deployment

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - "Infra/**"
      - "Backend/**"
      - "Frontend/**"

permissions:
  id-token: write
  contents: read

env:
  TERRAFORM_WORKING_DIRECTORY: ./Infra
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRETS }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}


jobs:
  changes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

  deploy-azure-resources:
    needs: changes
    runs-on: ubuntu-latest


    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3.0.0
        with:
          terraform_version: 1.6.3
          terraform_wrapper: false

      - name: Az CLI login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: |
          # Using local state file instead of Azure backend
          terraform init


      - name: Terraform Plan and Apply
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        env:
          TF_VAR_rg_name: ${{ secrets.CLOUD_RESUME_RESOURCEGROUPE }}
          TF_VAR_rg_location: ${{ secrets.CLOUD_RESOURCE_GROUP_LOCATION }}
          TF_VAR_cosmosdb_account_name: ${{ secrets.CLOUD_COSMO_DB_ACCOUNT_NAME }}
          TF_VAR_cosmosdb_sql_database_name: ${{ secrets.CLOUD_SQL_DB_NAME }}
          TF_VAR_cosmosdb_sql_container_name: ${{ secrets.CLOUD_SQL_CONTAINER_NAME }}
          TF_VAR_azure_function_name: ${{ secrets.CLOUD_AZURE_FUNCTION_NAME }}
          TF_VAR_static_website_storage_account: ${{ secrets.CLOUD_RESUME_STORAGE_ACCOUNT }}
          TF_VAR_cdn_profile_name: ${{ secrets.CLOUD_CDN_PROFILE_NAME }}
        run: |
          terraform plan -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" -out=tfplan
          terraform apply -auto-approve "tfplan"
      - name: Azure logout
        run: az logout
        if: always()
  deploy-backend:
    needs: deploy-azure-resources
    runs-on: ubuntu-latest


    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Zip the function
        run: |
          cd Backend/api
          zip -r function.zip .

      - name: Deploy to Azure Function
        uses: Azure/functions-action@v1
        id: deployment
        with:
          app-name: ${{ secrets.CLOUD_AZURE_FUNCTION_NAME }}
          package: Backend/api/function.zip
          publish-profile: ${{ secrets.CLOUD_AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}

      - name: Deployment status
        run: echo "Deployment status ${{ steps.deployment.outputs.success }}"

  deploy-frontend:
    needs: deploy-backend

    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Upload to blob storage
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob upload-batch --account-name ${{ secrets.CLOUD_RESUME_STORAGE_ACCOUNT }} \
            --auth-mode key \
            --overwrite=true \
            --destination '$web' \
            --source Frontend/
      - name: Purge CDN endpoint
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az cdn endpoint purge \
            --content-paths  "/*" \
            --profile-name ${{ secrets.CLOUD_CDN_PROFILE_NAME }} \
            --name ${{ secrets.CLOUD_CDN_PROFILE_NAME }} \
            --resource-group ${{ secrets.CLOUD_RESUME_RESOURCEGROUPE }}
      - name: Azure logout
        run: az logout
        if: always()
